package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.util.Locale;

public class GUI extends JFrame {
    private JPanel mainPanel;
    private JPanel searchPanel;
    private JLabel searchCountry;
    private JTextField countryCodeText;
    private JPanel informationPanel;
    private JLabel confirmedLabel;
    private JLabel criticalLabel;
    private JLabel deathsLabel;
    private JLabel recoveredLabel;
    private JLabel lastChangedLabel;
    private JLabel lastUpdatedLabel;
    private JButton searchBtn;
    private JTextField countryText;
    private JLabel countryCodeLabel;

    public GUI() throws IOException {

        createListeners();
        setDefaultData();
        setTitle("Covid Informer");
        setSize(750, 500);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setContentPane(new Background());
        add(mainPanel);
        searchPanel.setOpaque(false);
        mainPanel.setOpaque(false);
        informationPanel.setOpaque(false);
        setResizable(false);
        setLocationRelativeTo(null);
        setVisible(true);

        //sets the focus on the button so the textfields doesnt get reset
        searchBtn.requestFocusInWindow();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(4, 7, new Insets(0, 0, 0, 0), -1, -1));
        searchPanel = new JPanel();
        searchPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(searchPanel, new GridConstraints(1, 1, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        searchCountry = new JLabel();
        Font searchCountryFont = this.$$$getFont$$$(null, -1, 20, searchCountry.getFont());
        if (searchCountryFont != null) searchCountry.setFont(searchCountryFont);
        searchCountry.setForeground(new Color(-393219));
        searchCountry.setText("Search by country:");
        searchPanel.add(searchCountry, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        countryCodeLabel = new JLabel();
        Font countryCodeLabelFont = this.$$$getFont$$$(null, -1, 20, countryCodeLabel.getFont());
        if (countryCodeLabelFont != null) countryCodeLabel.setFont(countryCodeLabelFont);
        countryCodeLabel.setForeground(new Color(-393219));
        countryCodeLabel.setText("Search by code:");
        searchPanel.add(countryCodeLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        countryText = new JTextField();
        countryText.setForeground(new Color(-10526881));
        countryText.setText("Example: Sweden");
        searchPanel.add(countryText, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        countryCodeText = new JTextField();
        countryCodeText.setForeground(new Color(-9408400));
        countryCodeText.setText("Example: SE");
        searchPanel.add(countryCodeText, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        searchBtn = new JButton();
        searchBtn.setText("Search");
        searchPanel.add(searchBtn, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        informationPanel = new JPanel();
        informationPanel.setLayout(new GridLayoutManager(8, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(informationPanel, new GridConstraints(1, 5, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        informationPanel.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        informationPanel.add(spacer2, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        informationPanel.add(spacer3, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        informationPanel.add(spacer4, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        confirmedLabel = new JLabel();
        Font confirmedLabelFont = this.$$$getFont$$$(null, -1, 20, confirmedLabel.getFont());
        if (confirmedLabelFont != null) confirmedLabel.setFont(confirmedLabelFont);
        confirmedLabel.setForeground(new Color(-393219));
        confirmedLabel.setText("Confirmed:");
        informationPanel.add(confirmedLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        criticalLabel = new JLabel();
        Font criticalLabelFont = this.$$$getFont$$$(null, -1, 20, criticalLabel.getFont());
        if (criticalLabelFont != null) criticalLabel.setFont(criticalLabelFont);
        criticalLabel.setForeground(new Color(-393219));
        criticalLabel.setText("Critical:");
        informationPanel.add(criticalLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deathsLabel = new JLabel();
        Font deathsLabelFont = this.$$$getFont$$$(null, -1, 20, deathsLabel.getFont());
        if (deathsLabelFont != null) deathsLabel.setFont(deathsLabelFont);
        deathsLabel.setForeground(new Color(-393219));
        deathsLabel.setText("Deaths:");
        informationPanel.add(deathsLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        recoveredLabel = new JLabel();
        Font recoveredLabelFont = this.$$$getFont$$$(null, -1, 20, recoveredLabel.getFont());
        if (recoveredLabelFont != null) recoveredLabel.setFont(recoveredLabelFont);
        recoveredLabel.setForeground(new Color(-393219));
        recoveredLabel.setText("Recovered:");
        informationPanel.add(recoveredLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lastChangedLabel = new JLabel();
        Font lastChangedLabelFont = this.$$$getFont$$$(null, -1, 20, lastChangedLabel.getFont());
        if (lastChangedLabelFont != null) lastChangedLabel.setFont(lastChangedLabelFont);
        lastChangedLabel.setForeground(new Color(-393219));
        lastChangedLabel.setText("Last Changed:");
        informationPanel.add(lastChangedLabel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lastUpdatedLabel = new JLabel();
        Font lastUpdatedLabelFont = this.$$$getFont$$$(null, -1, 20, lastUpdatedLabel.getFont());
        if (lastUpdatedLabelFont != null) lastUpdatedLabel.setFont(lastUpdatedLabelFont);
        lastUpdatedLabel.setForeground(new Color(-393219));
        lastUpdatedLabel.setText("Last Updated");
        informationPanel.add(lastUpdatedLabel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        mainPanel.add(spacer5, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        mainPanel.add(spacer6, new GridConstraints(1, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer7 = new Spacer();
        mainPanel.add(spacer7, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer8 = new Spacer();
        mainPanel.add(spacer8, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer9 = new Spacer();
        mainPanel.add(spacer9, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer10 = new Spacer();
        mainPanel.add(spacer10, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    public void setDefaultData() {

        //temp values
        confirmedLabel.setText("Confirmed: " + String.valueOf(5));
        criticalLabel.setText("Critical: " + String.valueOf(5));
        deathsLabel.setText("Deaths: " + String.valueOf(5));
        recoveredLabel.setText("Recovered: " + String.valueOf(5));
        lastChangedLabel.setText("Last Changed:: " + "2021-02-18");
        lastUpdatedLabel.setText("Last Updated: " + "2021-02-18");

    }

    public void createListeners() {

        searchBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });

        countryText.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                countryText.setText("");
                countryText.setForeground(Color.BLACK);
            }
        });

        countryCodeText.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                countryCodeText.setText("");
                countryCodeText.setForeground(Color.BLACK);
            }
        });

    }

    //Background image class (Sets background image).
    public class Background extends JPanel {

        private BufferedImage image;

        public Background() {

            setLayout(new BorderLayout());
            try {
                // Use this if the image exists within the file system(Computer)
                //image = ImageIO.read(new File("C:\\Programming\\Java Projects\\IntelliJ\\Covid19-Informer\\src\\gui\\image\\background.jpg"));

                // Use this if the image is in the project
                //image = ImageIO.read(getClass().getResource("image/background.jpg"));

                //Use this to set image from URL.
                URL url = new URL(
                        "https://www.miun.se/imagevault/publishedmedia/4j5w951mnbf6uetzuspd/36224954-corona-viruses-3d-inside-an-organism-Hannu_Viitanen.jpg");
                image = ImageIO.read(url);

            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        @Override
        public Dimension getPreferredSize() {
            return image == null ? super.getPreferredSize() : new Dimension(image.getWidth(), image.getHeight());
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (image != null) {
                int x = (getWidth() - image.getWidth()) / 2;
                int y = (getHeight() - image.getHeight()) / 2;
                g.drawImage(image, x, y, this);
            }
        }

    }

}
